dt = read.csv (file="tool-SHEsis-scores-Full.csv", sep="\t")
dt [1:5,1:5]
dt [1:5,1:8]
dt$P.value[1:5]
dt$P.value = dt$P
dt [1:5,1:8]
dt = read.csv (file="tool-SHEsis-scores-Full.csv", sep="\t")
dt$P = dt$P.value
dt [1:5,1:8]
write.csv (file="new.csv", dt, sep="\t")
write.csv (file="new.csv", dt, sep="\t")
write.table (file="new.csv", dt, sep="\t")
write.table (file="new.csv", dt, sep="\t", quote="F", rownames=F)
write.table (file="new.csv", dt, sep="\t", quote="F", row.names=F)
write.table (file="new.csv", dt, sep="\t", quote="F", row.name=F)
write.table (file="new.csv", dt, sep="\t", quote="F", rowname=F)
write.table (file="new.csv", dt, sep="\t", quote="F")
write.table (file="new.csv", dt, sep="\t", quote=F, row.names=F)
dt$SCORE = -log(dt$P)
dt$DIFF = dt$SCORE - dt$THRESHOLD
write.table (file="new.csv", dt, sep="\t", quote=F, row.names=F)
dt = read.csv ("x-refMarkersMat.csv")
head (dt)
dt [1:10,1:10]
dt = read.csv ("x-refMarkersMat.csv", row.names=F)
dt [1:10,1:10]
dt = read.csv ("x-refMarkersMat.csv", row.names=F)
dt [1:10,1:10]
dts = dt[,-1]
dts [1:10,1:10]
ls = as.list (dts)
ls [1]
ls [1][1:10]
ls [1:10]
ls [1:1]
length (ls)
dim (dt)
dim (dts)
dts[1,]
df =  as.data.frame (dts)
df [1:10,1:10]
ls = as.list (df)
ls [1]
ls [1][1:10]
ls [1][1:1]
ls [[1]]
ls [[1]][1]
ls [[1]][2]
ls [[1]][3]
ls [[1]][4]

split(x, rep(1:ncol(x), each = nrow(x)))
x = dts
ls = split(x, rep(1:ncol(x), each = nrow(x)))
ls [1]
ls [[1]]
ls [[1]][1]
ls [[1]][2]
ls [[1]][3]
ls [[1]][1]
lapply(seq_len(ncol(x)), function(i) x[,i])
ls = lapply(seq_len(ncol(x)), function(i) x[,i])
ls [[1]]
ls [[2]]
ls [[3]]
ls [[]]
ls = lapply(seq_len(nrow(x)), function(i) x[i,])
ls [[1]][1]
ls [[1]][2]
ls [[1]][3]
ls [[1]][5]
ls [[1]][9]
ls [[1]][19]
ls [[1]][29]
ls [[1]][59]
ls [[1]][159]
ls [[1]][359]
ls [[2]][359]
ls [[2]][59]
ls [[2]]
ls [[3]]
ls [[4]]
ls [[4]][111]
ls [[4]][11]
ls [[4]][411]
rownames (x) = 1:nrow (x)
ls = lapply(seq_len(nrow(x)), function(i) x[i,])
ls = mclapply(seq_len(nrow(x)), function(i) x[i,])
library (parallel)
ls = mclapply(seq_len(nrow(x)), function(i) x[i,])
ls = mclapply(seq_len(nrow(x)), function(i) x[i,],mc.cores=6)
ls = mclapply(seq_len(ncol(x)), function(i) x[,i],mc.cores=6)
x = t(dts)
ls = mclapply(seq_len(ncol(x)), function(i) x[,i],mc.cores=6)
ls [[1]]
ls [[1]][1]
ls [[1]][2]
ls [[4]][2]
ls [[4]][1]
ls [[4]][10]
ls [[4]][9]
ls [[4]][8]
ls [[4]][7]
m=as.matrix (ls)
dim (m)
unlist (ls)
dts
dim (dts)
n = nrow (dts)
m = ncol (dts)
m = as.matrix (unlist (ls), nrow=n,ncol=m)
dim (m)
ls [1:10]
ls [1:1]
ls [[1]]
ls [[1]][1]
m = as.matrix (unlist (ls), ncol=m, byrow=T)
dim (m)
m=as.matrix (as.data.frame (ls))
dim (m)
m=as.matrix (as.data.frame (ls),byrow=T)
dim (m)
m=as.matrix (as.data.frame (ls),byrow=F)
dim (m)
m=as.matrix (as.data.frame (ls),byrow=T)
m[1:10,1:10]
m[1:10,1:1]
m[1:10,1:2]
df = as.data.frame (ls)
dim (df)
dtsft = t(as.data.frame (ls))
dim (df)
df [1:10,1:10]
df [1:10,1:1]
df [1,1:1]
df [1,1:2]
df [1,1:3]
df [1,1:10]
df [1,1:20]
options (width=300)
df [1:10,1:10]
df = as.data.frame (ls)
df [1,1]
df [1,1:10]
df = as.data.frame (ls,col.names=F)
df [1,1:10]
df = as.data.frame (ls,cut.names=T)
df [1,1:10]
df [1,1:5]
df [1,1:2]
df = as.data.frame (ls,cut.names=F)
df [1,1:2]
df = as.data.frame (ls,col.names=rownames(x)))
df = as.data.frame (ls,col.names=rownames(x))
df [1,1:2]
df [1,1:10]
df = as.data.frame (ls)
df [1,1:10]
df = as.data.frame (ls,col.names=rownames(x))
df [1,1:10]
df [1:2,1:10]
dt [1:10,1:10]
dts [1:10,1:10]
dtsls = mclapply(seq_len(ncol()), function(i) x[,i],mc.cores=6)
dtst = t(dts)
dtsls = mclapply(seq_len(ncol(dtst)), function(i) dtst[,i],mc.cores=6)
dtsls [1:2]
dtsls [[1]][1]
dtsls [[1]][2]
dtsdf = as.data.frame (ls,col.names=rownames(dts))
dtsdf [1:10,1]
dtsdf [1:10,1:10]
dts [1:10,1:10]
dtsdf = t(as.data.frame (ls,col.names=rownames(dts)))
dts [1:10,1:10]
dtsdf [1:10,1:10]
dtsdf [1:10,1:20]
dts [1:10,1:20]
mclapply(seq_len(ncol(dtst)), function(i) dtst[,i],mc.cores=6)
     acgtToNum <- function(x){
284         print (x)
285         quit ()
286         y   <- gregexpr(pattern=x[1],text=x[-1],fixed=T)  
287         ans <- as.integer(lapply(y,function(z){ifelse(z[1]<0,ploidy,ploidy-length(z))}))    
288         return(ans)
289     }
     acgtToNum <- function(x){
284         print (x)
285         quit ()
286         y   <- gregexpr(pattern=x[1],text=x[-1],fixed=T)  
287         ans <- as.integer(lapply(y,function(z){ifelse(z[1]<0,ploidy,ploidy-length(z))}))    
288         return(ans)
289     }
     acgtToNum <- function(x){
284         print (x)
285         quit ()
286         y   <- gregexpr(pattern=x[1],text=x[-1],fixed=T)  
287         ans <- as.integer(lapply(y,function(z){ifelse(z[1]<0,ploidy,ploidy-length(z))}))    
288         return(ans)
289     }
     acgtToNum <- function(x){
284         print (x)
285         quit ()
286         y   <- gregexpr(pattern=x[1],text=x[-1],fixed=T)  
287         ans <- as.integer(lapply(y,function(z){ifelse(z[1]<0,ploidy,ploidy-length(z))}))    
288         return(ans)
289     }
acgtToNum <- function(x){ 
y   <- gregexpr(pattern=x[1],text=x[-1],fixed=T) 
ans <- as.integer(lapply(y,function(z){ifelse(z[1]<0,ploidy,ploidy-length(z))}))
return(ans)
}
M = mclapply (ls, acgtToNum)
source ("f.R")
M = mclapply (ls, acgtToNum)
M = mclapply (ls, acgtToNum)
ls[[1]]
source ("f.R")
M = mclapply (ls, f)
x[[1]][1]
x[[1]][2]
x[[1]][3]
ls [[1]][1]
ls [[1]][2]
lsu = unlist (ls[[1]])
lsu
lsu [1]
lsu [2]
M = mclapply (ls, f)
source ("f.R")
M = mclapply (ls, f)
M = mclapply (ls, f)
source ("f.R")
M = mclapply (ls, f)
M = mclapply (ls, f)
source ("f.R")
M = mclapply (ls, f)
lsu
lsu [1:10]
lsug = lsu [-1]
lsug [1:10]
source ("f.R")
M = mclapply (ls, f)
M = mclapply (ls, f)
source ("f.R")
M = mclapply (ls, f)
M = mclapply (ls, f)
M = mclapply (ls, f, mc.cores=1)
M = mclapply (ls, f)
M = mclapply (ls, f, mc.cores=1)
source ("f.R")
M = mclapply (ls, f, mc.cores=1)
source ("f.R")
M = mclapply (ls, f, mc.cores=1)
source ("f.R")
source ("f.R")
M = mclapply (ls, f, mc.cores=1)
M = mclapply (ls, f, mc.cores=6)
M = mclapply (ls, f, mc.cores=8)
dtsdf = t(as.data.frame (ls,col.names=rownames(dts)))
dtsdf [1:5,1:5]
dtsdf [1:5,1:10]
M[1:5,1:5]
M[1:10]
M[1:5]
M[1]
M[1][1:5]
M[[1]][1:5]
dim (M)
length (M)
length (ls)
dtsdf = t(as.data.frame (ls,col.names=rownames(dts)))
dim (dtsdf)
